import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'checkstyle'
    id 'findbugs'
    id 'com.bmuschko.nexus' version '2.3.1'
    id 'com.github.johnrengelman.shadow' version '1.2.1'
}

group = 'com.imsweb'
version = file('VERSION').text
description = 'This framework allows edits to be defined in Groovy and to be executed on various data types.'

println "Starting build using ${Jvm.current()}"

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.imsweb:staging-client-java:1.4.6'
    compile 'org.codehaus.groovy:groovy:2.4.4:indy'
    compile 'commons-codec:commons-codec:1.10'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-beanutils:commons-beanutils:1.9.2'
    compile 'joda-time:joda-time:2.8.1'
    compile 'com.thoughtworks.xstream:xstream:1.4.7'
    testCompile 'junit:junit:4.12'
    testCompile 'com.imsweb:layout:1.3.3'
    testCompile 'commons-io:commons-io:2.4'
}

// enforce UTF-8 for all compilation tasks
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// display the compilation warnings
compileJava.options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
compileTestJava.options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'

// customize the manifest
jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': version,
                'Implementation-Vendor': 'Information Management Services Inc.',
                'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
        )
    }
}

// checkstyle plugin settings
checkstyle {
    ignoreFailures = true
    configFile = file('config/checkstyle/checkstyle.xml')
}

// findbugs plugin settings
findbugs {
    ignoreFailures = true
    effort = 'max'
    excludeFilter = file('config/findbugs/findbugs-exclude.xml')
}

// use this task to generate the regex parser
task generateJavaContextParser << {

    // create lexer
    javaexec {
        main = '-jar'
        args = ['config/jflex-1.4.2/lib/JFlex.jar',
                '--nobak',
                '-d',
                'src/main/java/com/imsweb/validation/internal/context/',
                'config/java-context.flex']
    }
}

// needed to deploy to Maven Central
modifyPom {
    project {
        name 'Validation Framework'
        description 'This framework allows edits to be defined in Groovy and to be executed on various data types.'
        url 'https://github.com/imsweb/validation'
        inceptionYear '2015'

        scm {
            url 'https://github.com/imsweb/validation'
            connection 'scm:https://github.com/imsweb/validation.git'
            developerConnection 'scm:git@github.com:imsweb/validation.git'
        }

        licenses {
            license {
                name 'A modified BSD License (BSD)'
                url 'https://github.com/imsweb/validation/blob/master/LICENSE'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'depryf'
                name 'Fabian Depry'
                email 'depryf@imsweb.com'
            }
        }
    }
}

// Gradle wrapper, this allows to build the project without having to install Gradle!
task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}


